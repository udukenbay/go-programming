#1: The smallest standalone element of a program that expresses some action to be carried out.
Statement

#2: A combination of one or more explicit values, constants, variables, operators, and functions 
    that the programming language interprets and computes to produce another value.
Expression

#3: Which are "parentheses" or "parens"
()

#4: Which are "curly braces" or "curlies" or "braces"
{}

#5: Which are "brackets"
[]

#6: The "scope" of a variable is where you can access the variable, eg, write to it or read the value from it.
true

#7: A "primitive" data TYPE is one that is built into the language AND/OR just a basic data type which is built into the language
true

#8: In Go, an "int" is a primitive data TYPE
true

#9: In Go, a "string" is a primitive data TYPE
true

#10: A "composite" data TYPE allows you to compose together values of other data TYPES
true

#11: When a variable is declared in Go using the "var" keyword, and no VALUE is ASSIGNED to that variable, 
    then the compiler assigns a default value to the variable. This is known as the "zero value"
true

#12: Keywords are words that a reserved for use by the Go programming language; 
    they have to be used in a certain way for a certain purpose.

#13: Keywords are sometimes called “reserved words.”
true

#14: You can’t use a keyword for anything other than its purpose.
true

#15: In “2 + 2” the “+” is the OPERATOR
true

#16: In “2 + 2” the “2”s are OPERANDS
true

#17: For finding documentation, what is the difference between documentation found at golang.org and godoc.org?
golang.org is official site, godoc.org is created by some third-party slightly different functionalities

#18: "package" is a keyword
true

#19: "var" is a keyword
true

#20: The entry point for all programs is in func main() which needs to be inside package main
true

#21: The "short declaration operator" can be used anywhere in a program, 
    including at both the package level and at the block level.
false

#22: What are the three words used to describe good package names in the "effective go" document?
short, concise, evocative

#23: What is the name of the website where you can write (most) Go code online and have it run online?
go playground

#24: A great place to ask questions is the "golang bridge forum" at https://forum.golangbridge.org/
true

#25: When you see something like "fmt.Println()" this is calling the "Println()" function from the "fmt" package.
true

#26: An "identifier" is the name assigned to a variable or a function or a constant.
true

#27: To call a func, variable, or constant from a package, use the "package-dot-identifier" syntax. 
    For example, like this, "fmt.Println()"
true

#28: What is "idiomatic Go code"?
An "idiom" is a pattern of speech for a certain region, people, or lang. In Go programming, "idiomating" code is code 
that adheres to the conventions of the language.

#29: Which character allows you to "throw away returns" or "send returns into the void"? 
    Said another way, which character allows you to tell the compiler that you are not going to use a value returned by a function?
"-"

#30: In Go, you cannot have a variable which you do not use.
true

#31: When you see that a func has a parameter of this type "...interface{}" this is called a "variadic parameter" and 
    it means that the func can take as many values of that type as you want to pass in.
true

#32: Every value in Go is also of type "empty interface" which is expressed like this: "interface{}"
true

#33: A statement is an instruction that commands the computer to perform a specified action. 
    Usually statements take up a line in a program.
true

#34: An expression is a combination of one or more explicit values, constants, variables, operators, and 
    functions that the programming language interprets and computes to produce another value. For example, 
    2+3 is an expression which evaluates to 5.
true

#35: If I wanted to print to a string and then assign that value to a variable, I could use the "func Sprintf()" 
    from the "fmt" package.
true

#36: In Go, you can create your own TYPE
true

#37: We don't say "casting" in Go, we say "conversion"
true

#38: There is a language which we use to talk about the language.
true

#39: When you create our own TYPE in Go, that TYPE will have an "underlying TYPE".
true